/* ===========================================================
   KCSOS Prototype Schema (Fixed Order + Audit + Files)
   ===========================================================*/

-- 0) AUDIT TABLE + FUNCTION (no deps)
CREATE TABLE audit_log (
    id           BIGSERIAL PRIMARY KEY,
    table_name   TEXT    NOT NULL,
    record_pk    JSONB   NOT NULL,
    action       TEXT    NOT NULL,   -- INSERT | UPDATE | DELETE
    changed_data JSONB,
    old_data     JSONB,
    user_id      INTEGER,
    occurred_at  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE audit_log IS 'Row-level audit entries for all core tables.';

CREATE OR REPLACE FUNCTION audit_row_change()
RETURNS TRIGGER AS $$
DECLARE pk JSONB;
BEGIN
    IF TG_OP = 'INSERT' THEN
        pk := jsonb_build_object('id', NEW.id);
        INSERT INTO audit_log(table_name, record_pk, action, changed_data, old_data, user_id)
        VALUES (TG_TABLE_NAME, pk, 'INSERT', to_jsonb(NEW), NULL, NEW.updated_by);
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        pk := jsonb_build_object('id', NEW.id);
        INSERT INTO audit_log(table_name, record_pk, action, changed_data, old_data, user_id)
        VALUES (TG_TABLE_NAME, pk, 'UPDATE', to_jsonb(NEW), to_jsonb(OLD), NEW.updated_by);
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        pk := jsonb_build_object('id', OLD.id);
        INSERT INTO audit_log(table_name, record_pk, action, changed_data, old_data, user_id)
        VALUES (TG_TABLE_NAME, pk, 'DELETE', NULL, to_jsonb(OLD), OLD.updated_by);
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------
-- 1) CORE USER TABLE FIRST (others reference it)
--------------------------------------------------------------
CREATE TABLE app_user (
    id               SERIAL PRIMARY KEY,
    first_name       TEXT NOT NULL,
    last_name        TEXT NOT NULL,
    email            TEXT NOT NULL UNIQUE,
    phone            TEXT,
    address          TEXT,
    npi              TEXT,
    license_number   TEXT,
    hire_date        DATE,
    status           TEXT DEFAULT 'Active',
    last_login       TIMESTAMPTZ,
    role             TEXT NOT NULL,                  -- Practitioner | Supervisor | Admin | Support
    department       TEXT,
    supervisor_id    INTEGER REFERENCES app_user(id),
    districts        TEXT[],
    user_type        TEXT,
    permission_level TEXT,
    created_at       TIMESTAMPTZ DEFAULT NOW(),
    updated_at       TIMESTAMPTZ DEFAULT NOW(),
    created_by       INTEGER REFERENCES app_user(id),
    updated_by       INTEGER REFERENCES app_user(id)
);

--------------------------------------------------------------
-- 2) OTHER MASTER/LOOKUP TABLES
--------------------------------------------------------------
CREATE TABLE organization (
    id              SERIAL PRIMARY KEY,
    name            TEXT NOT NULL,
    orp_name        TEXT,
    orp_npi         TEXT,
    payer_type      TEXT NOT NULL,
    status          TEXT DEFAULT 'Active',
    effective_date  DATE,
    contact_email   TEXT,
    created_at      TIMESTAMPTZ DEFAULT NOW(),
    updated_at      TIMESTAMPTZ DEFAULT NOW(),
    created_by      INTEGER REFERENCES app_user(id),
    updated_by      INTEGER REFERENCES app_user(id)
);

CREATE TABLE qualification (
    id               SERIAL PRIMARY KEY,
    type             TEXT,
    code             TEXT UNIQUE,
    description      TEXT,
    status           TEXT DEFAULT 'Active',
    effective_date   DATE,
    expiration_date  DATE,
    requirements     TEXT[],
    jurisdiction     TEXT,
    created_at       TIMESTAMPTZ DEFAULT NOW(),
    updated_at       TIMESTAMPTZ DEFAULT NOW(),
    created_by       INTEGER REFERENCES app_user(id),
    updated_by       INTEGER REFERENCES app_user(id)
);

CREATE TABLE billing_code (
    id                     SERIAL PRIMARY KEY,
    code                   TEXT UNIQUE NOT NULL,
    type                   TEXT,
    description            TEXT,
    unit                   TEXT,
    rate                   NUMERIC(12,2),
    eligible_practitioners TEXT[],
    status                 TEXT DEFAULT 'Active',
    effective_date         DATE,
    payer_specific         BOOLEAN DEFAULT FALSE,
    created_at             TIMESTAMPTZ DEFAULT NOW(),
    updated_at             TIMESTAMPTZ DEFAULT NOW(),
    created_by             INTEGER REFERENCES app_user(id),
    updated_by             INTEGER REFERENCES app_user(id)
);

CREATE TABLE practitioner_type (
    id          SERIAL PRIMARY KEY,
    code        TEXT UNIQUE NOT NULL,
    description TEXT NOT NULL,
    created_at  TIMESTAMPTZ DEFAULT NOW(),
    updated_at  TIMESTAMPTZ DEFAULT NOW(),
    created_by  INTEGER REFERENCES app_user(id),
    updated_by  INTEGER REFERENCES app_user(id)
);

CREATE TABLE modifier (
    id          SERIAL PRIMARY KEY,
    code        TEXT UNIQUE NOT NULL,
    description TEXT,
    required    BOOLEAN DEFAULT FALSE,
    notes       TEXT,
    created_at  TIMESTAMPTZ DEFAULT NOW(),
    updated_at  TIMESTAMPTZ DEFAULT NOW(),
    created_by  INTEGER REFERENCES app_user(id),
    updated_by  INTEGER REFERENCES app_user(id)
);

CREATE TABLE fee_schedule_code (
    id                  SERIAL PRIMARY KEY,
    procedure_code      TEXT    NOT NULL,
    service_description TEXT    NOT NULL,
    service_category    TEXT    NOT NULL,
    time_increment_text TEXT,
    base_minutes        INTEGER,
    group_size_min      INTEGER,
    group_size_max      INTEGER,
    rate_amount         NUMERIC(12,2) NOT NULL,
    rate_unit           TEXT,
    dyadic_allowed      BOOLEAN DEFAULT FALSE,
    telehealth_audio    BOOLEAN DEFAULT FALSE,
    telehealth_av       BOOLEAN DEFAULT FALSE,
    add_on_to_code      TEXT,
    effective_year      INTEGER,
    source_version      TEXT,
    notes               TEXT,
    created_at          TIMESTAMPTZ DEFAULT NOW(),
    updated_at          TIMESTAMPTZ DEFAULT NOW(),
    created_by          INTEGER REFERENCES app_user(id),
    updated_by          INTEGER REFERENCES app_user(id)
);

CREATE TABLE fee_code_practitioner_type (
    id                    SERIAL PRIMARY KEY,
    fee_schedule_code_id  INTEGER NOT NULL REFERENCES fee_schedule_code(id) ON DELETE CASCADE,
    practitioner_type_id  INTEGER NOT NULL REFERENCES practitioner_type(id) ON DELETE CASCADE,
    created_at            TIMESTAMPTZ DEFAULT NOW(),
    updated_at            TIMESTAMPTZ DEFAULT NOW(),
    created_by            INTEGER REFERENCES app_user(id),
    updated_by            INTEGER REFERENCES app_user(id),
    UNIQUE (fee_schedule_code_id, practitioner_type_id)
);

CREATE TABLE fee_code_modifier (
    id                    SERIAL PRIMARY KEY,
    fee_schedule_code_id  INTEGER NOT NULL REFERENCES fee_schedule_code(id) ON DELETE CASCADE,
    modifier_id           INTEGER NOT NULL REFERENCES modifier(id)          ON DELETE CASCADE,
    is_required           BOOLEAN DEFAULT FALSE,
    context_note          TEXT,
    created_at            TIMESTAMPTZ DEFAULT NOW(),
    updated_at            TIMESTAMPTZ DEFAULT NOW(),
    created_by            INTEGER REFERENCES app_user(id),
    updated_by            INTEGER REFERENCES app_user(id),
    UNIQUE (fee_schedule_code_id, modifier_id)
);

--------------------------------------------------------------
-- 3) RELATION TABLES FOR USERS
--------------------------------------------------------------
CREATE TABLE user_qualification (
    id                  SERIAL PRIMARY KEY,
    user_id             INTEGER NOT NULL REFERENCES app_user(id)      ON DELETE CASCADE,
    qualification_id    INTEGER NOT NULL REFERENCES qualification(id) ON DELETE CASCADE,
    date_obtained       DATE,
    expiration_date     DATE,
    is_active           BOOLEAN DEFAULT TRUE,
    verification_status TEXT DEFAULT 'Pending',
    created_at          TIMESTAMPTZ DEFAULT NOW(),
    updated_at          TIMESTAMPTZ DEFAULT NOW(),
    created_by          INTEGER REFERENCES app_user(id),
    updated_by          INTEGER REFERENCES app_user(id),
    UNIQUE (user_id, qualification_id)
);

CREATE TABLE user_authorized_service (
    id              SERIAL PRIMARY KEY,
    user_id         INTEGER NOT NULL REFERENCES app_user(id)     ON DELETE CASCADE,
    billing_code_id INTEGER NOT NULL REFERENCES billing_code(id) ON DELETE CASCADE,
    created_at      TIMESTAMPTZ DEFAULT NOW(),
    updated_at      TIMESTAMPTZ DEFAULT NOW(),
    created_by      INTEGER REFERENCES app_user(id),
    updated_by      INTEGER REFERENCES app_user(id),
    UNIQUE (user_id, billing_code_id)
);

CREATE TABLE user_practitioner_type (
    id                   SERIAL PRIMARY KEY,
    user_id              INTEGER NOT NULL REFERENCES app_user(id)          ON DELETE CASCADE,
    practitioner_type_id INTEGER NOT NULL REFERENCES practitioner_type(id) ON DELETE CASCADE,
    created_at           TIMESTAMPTZ DEFAULT NOW(),
    updated_at           TIMESTAMPTZ DEFAULT NOW(),
    created_by           INTEGER REFERENCES app_user(id),
    updated_by           INTEGER REFERENCES app_user(id),
    UNIQUE (user_id, practitioner_type_id)
);

--------------------------------------------------------------
-- 4) STUDENT / SERVICE / CLAIM
--------------------------------------------------------------
CREATE TABLE student (
    id                         SERIAL PRIMARY KEY,
    ssid                       TEXT UNIQUE NOT NULL,
    local_id                   TEXT,
    first_name                 TEXT NOT NULL,
    last_name                  TEXT NOT NULL,
    preferred_name             TEXT,
    birthdate                  DATE NOT NULL,
    status                     TEXT        DEFAULT 'Active',
    last_modified_at           TIMESTAMPTZ DEFAULT NOW(),
    gender                     TEXT,
    grade                      SMALLINT,
    district                   TEXT NOT NULL,
    school                     TEXT,
    address                    TEXT,
    city                       TEXT,
    state                      TEXT,
    zip_code                   TEXT,
    primary_contact_name       TEXT,
    primary_contact_phone      TEXT,
    transportation_team        TEXT,
    transportation_needs       TEXT,
    practitioner_id            INTEGER REFERENCES app_user(id),
    primary_disability         TEXT,
    parental_consent_on_file   BOOLEAN DEFAULT FALSE,
    parental_consent_in_bill   BOOLEAN DEFAULT FALSE,
    parental_consent_given     BOOLEAN DEFAULT FALSE,
    parental_consent_date      DATE,
    comments                   TEXT,
    insurance_type             TEXT,
    insurance_carrier          TEXT,
    insurance_group_number     TEXT,
    insurance_policy_number    TEXT,
    insurance_effective_date   DATE,
    medi_cal_eligible          BOOLEAN DEFAULT FALSE,
    medi_cal_benefits_id       TEXT,
    copay_id                   TEXT,
    iep_date                   DATE,
    next_review_date           DATE,
    emergency_contact_name     TEXT,
    emergency_contact_phone    TEXT,
    created_at                 TIMESTAMPTZ DEFAULT NOW(),
    updated_at                 TIMESTAMPTZ DEFAULT NOW(),
    created_by                 INTEGER REFERENCES app_user(id),
    updated_by                 INTEGER REFERENCES app_user(id)
);

CREATE TABLE service (
    id                 SERIAL PRIMARY KEY,
    student_id         INTEGER NOT NULL REFERENCES student(id),
    practitioner_id    INTEGER NOT NULL REFERENCES app_user(id),
    service_date       DATE    NOT NULL,
    service_time       TIME,
    end_time           TIME,
    duration_minutes   INTEGER,
    service_type       TEXT,
    location           TEXT,
    status             TEXT DEFAULT 'Upcoming',
    case_notes         TEXT,
    appointment_notes  TEXT,
    is_group_service   BOOLEAN DEFAULT FALSE,
    group_name         TEXT,
    created_at         TIMESTAMPTZ DEFAULT NOW(),
    updated_at         TIMESTAMPTZ DEFAULT NOW(),
    created_by         INTEGER REFERENCES app_user(id),
    updated_by         INTEGER REFERENCES app_user(id)
);

CREATE TABLE claim (
    id                         SERIAL PRIMARY KEY,
    claim_number               TEXT UNIQUE NOT NULL,
    batch_number               TEXT,
    status                     TEXT DEFAULT 'Incomplete',
    service_date               DATE,
    billed_amount              NUMERIC(12,2),
    paid_amount                NUMERIC(12,2),
    finalized_date             DATE,
    service_code               TEXT,
    service_description        TEXT,
    quantity                   NUMERIC,
    quantity_type              TEXT,
    location                   TEXT,
    frequency_type             TEXT,
    rendering_provider         TEXT,
    rendering_provider_npi     TEXT,
    referring_provider         TEXT,
    referring_provider_npi     TEXT,
    district                   TEXT,
    student_ssid               TEXT REFERENCES student(ssid),
    student_name               TEXT,
    student_dob                DATE,
    insurance_type             TEXT,
    insurance_carrier          TEXT,
    medi_cal_eligible          BOOLEAN,
    carelon_id                 TEXT,
    consent_to_treat           BOOLEAN,
    consent_to_bill            BOOLEAN,
    modifiers                  TEXT[],
    remittance_data            JSONB,
    created_at                 TIMESTAMPTZ DEFAULT NOW(),
    updated_at                 TIMESTAMPTZ DEFAULT NOW(),
    created_by                 INTEGER REFERENCES app_user(id),
    updated_by                 INTEGER REFERENCES app_user(id)
);

--------------------------------------------------------------
-- 5) PERMISSIONS
--------------------------------------------------------------
CREATE TABLE permission_category (
    id         SERIAL PRIMARY KEY,
    title      TEXT NOT NULL,
    icon       TEXT,
    expanded   BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    created_by INTEGER REFERENCES app_user(id),
    updated_by INTEGER REFERENCES app_user(id)
);

CREATE TABLE permission_item (
    id               SERIAL PRIMARY KEY,
    category_id      INTEGER NOT NULL REFERENCES permission_category(id) ON DELETE CASCADE,
    name             TEXT    NOT NULL UNIQUE,
    practitioner     BOOLEAN DEFAULT FALSE,
    supervisor       BOOLEAN DEFAULT FALSE,
    district_admin   BOOLEAN DEFAULT FALSE,
    system_admin     BOOLEAN DEFAULT FALSE,
    created_at       TIMESTAMPTZ DEFAULT NOW(),
    updated_at       TIMESTAMPTZ DEFAULT NOW(),
    created_by       INTEGER REFERENCES app_user(id),
    updated_by       INTEGER REFERENCES app_user(id)
);

--------------------------------------------------------------
-- 6) GROUPS
--------------------------------------------------------------
CREATE TABLE service_group (
    id                SERIAL PRIMARY KEY,
    name              TEXT NOT NULL,
    description       TEXT,
    created_date      DATE     DEFAULT CURRENT_DATE,
    created_by        INTEGER  REFERENCES app_user(id),
    practitioner_id   INTEGER  REFERENCES app_user(id),
    status            TEXT     DEFAULT 'Active',
    service_type      TEXT,
    meeting_frequency TEXT,
    duration          TEXT,
    location          TEXT,
    updated_at        TIMESTAMPTZ DEFAULT NOW(),
    updated_by        INTEGER REFERENCES app_user(id)
);

CREATE TABLE group_membership (
    id            SERIAL PRIMARY KEY,
    group_id      INTEGER NOT NULL REFERENCES service_group(id) ON DELETE CASCADE,
    student_id    INTEGER NOT NULL REFERENCES student(id)       ON DELETE CASCADE,
    join_date     DATE,
    status        TEXT DEFAULT 'Active',
    exit_date     DATE,
    exit_reason   TEXT,
    created_at    TIMESTAMPTZ DEFAULT NOW(),
    updated_at    TIMESTAMPTZ DEFAULT NOW(),
    created_by    INTEGER REFERENCES app_user(id),
    updated_by    INTEGER REFERENCES app_user(id),
    UNIQUE (group_id, student_id)
);

--------------------------------------------------------------
-- 7) FILE METADATA
--------------------------------------------------------------
CREATE TABLE file_metadata (
    id               SERIAL PRIMARY KEY,
    entity_table     TEXT    NOT NULL,   -- 'student', 'app_user', 'claim', etc.
    entity_id        INTEGER NOT NULL,   -- row id in that table
    document_type    TEXT    NOT NULL,   -- 'Parental Consent', 'Qualification Doc', ...
    file_name        TEXT    NOT NULL,
    mime_type        TEXT,
    storage_path     TEXT    NOT NULL,
    file_size_bytes  BIGINT,
    checksum         TEXT,
    notes            TEXT,
    uploaded_by      INTEGER REFERENCES app_user(id),
    uploaded_at      TIMESTAMPTZ DEFAULT NOW()
);

--------------------------------------------------------------
-- 8) ATTACH AUDIT TRIGGERS (after all tables exist)
--------------------------------------------------------------
CREATE TRIGGER trg_audit_app_user
AFTER INSERT OR UPDATE OR DELETE ON app_user
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_organization
AFTER INSERT OR UPDATE OR DELETE ON organization
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_qualification
AFTER INSERT OR UPDATE OR DELETE ON qualification
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_billing_code
AFTER INSERT OR UPDATE OR DELETE ON billing_code
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_practitioner_type
AFTER INSERT OR UPDATE OR DELETE ON practitioner_type
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_modifier
AFTER INSERT OR UPDATE OR DELETE ON modifier
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_fee_schedule_code
AFTER INSERT OR UPDATE OR DELETE ON fee_schedule_code
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_fee_code_practitioner_type
AFTER INSERT OR UPDATE OR DELETE ON fee_code_practitioner_type
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_fee_code_modifier
AFTER INSERT OR UPDATE OR DELETE ON fee_code_modifier
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_user_qualification
AFTER INSERT OR UPDATE OR DELETE ON user_qualification
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_user_authorized_service
AFTER INSERT OR UPDATE OR DELETE ON user_authorized_service
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_user_practitioner_type
AFTER INSERT OR UPDATE OR DELETE ON user_practitioner_type
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_student
AFTER INSERT OR UPDATE OR DELETE ON student
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_service
AFTER INSERT OR UPDATE OR DELETE ON service
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_claim
AFTER INSERT OR UPDATE OR DELETE ON claim
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_permission_category
AFTER INSERT OR UPDATE OR DELETE ON permission_category
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_permission_item
AFTER INSERT OR UPDATE OR DELETE ON permission_item
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_service_group
AFTER INSERT OR UPDATE OR DELETE ON service_group
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_group_membership
AFTER INSERT OR UPDATE OR DELETE ON group_membership
FOR EACH ROW EXECUTE FUNCTION audit_row_change();

CREATE TRIGGER trg_audit_file_metadata
AFTER INSERT OR UPDATE OR DELETE ON file_metadata
FOR EACH ROW EXECUTE FUNCTION audit_row_change();